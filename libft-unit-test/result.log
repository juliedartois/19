ft_memset:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_bzero:      [OK] [OK] [OK] [OK] 
ft_memcpy:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_memccpy:    [CRASH] [CRASH] [CRASH] [CRASH] [CRASH] [OK] [CRASH] [OK] [CRASH] [OK] [OK] [OK] 
[crash]: your memccpy doesn't work with basic params
Test code:
	char src[] = "test basic du memccpy !";
	char buff1[22];
	char buff2[22];

	__builtin___memccpy_chk (buff1, src, 'm', 6, __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, src, 'm', 6);
	if (!memcmp(buff1, buff2, 6))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memccpy doesn't cast the memory into unsigned char
Test code:
	char buff1[] = "abcdefghijklmnopqrstuvwxyz";
	char buff2[] = "abcdefghijklmnopqrstuvwxyz";
	char *src = "string with\200inside !";

	__builtin___memccpy_chk (buff1, src, '\200', 21, __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, src, '\200', 21);
	if (!memcmp(buff1, buff2, 21))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memccpy doesn't cast the stop-character into unsigned char
Test code:
	char buff1[] = "abcdefghijklmnopqrstuvwxyz";
	char buff2[] = "abcdefghijklmnopqrstuvwxyz";
	char *src = "string with\200inside !";

	__builtin___memccpy_chk (buff1, src, 0600, 21, __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, src, 0600, 21);
	if (!memcmp(buff1, buff2, 21))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memccpy's return is false/doesn't work with basic params
Test code:
	char src[] = "test basic du memccpy !";
	char buff1[22];

	__builtin___memset_chk (buff1, 0, sizeof(buff1), __builtin_object_size (buff1, 0));
	char *r1 = __builtin___memccpy_chk (buff1, src, 'm', 22, __builtin_object_size (buff1, 0));
	char *r2 = ft_memccpy(buff1, src, 'm', 22);
	if (r1 != r2)
		exit(TEST_FAILED);
	r1 = __builtin___memccpy_chk ("", src, 'm', 0, __builtin_object_size ("", 0));
	r2 = ft_memccpy("", src, 'm', 0);
	if (r1 != r2)
		exit(TEST_FAILED);
	exit(TEST_SUCCESS);


[crash]: your memccpy does not work with not found char
Test code:
	char src[] = "test basic du memccpy !";
	char buff1[22];
	char buff2[22];
	char *r1 = __builtin___memccpy_chk (buff1, src, 'z', 22, __builtin_object_size (buff1, 0));
	char *r2 = ft_memccpy(buff2, src, 'z', 22);

	if (r1 == r2)
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memccpy does not work with basic params
Test code:
	char src[] = "test basic !";
	char buff1[] = "the cake is a lie !\0I'm hidden lol\r\n";
	char buff2[] = "the cake is a lie !\0I'm hidden lol\r\n";

	__builtin___memccpy_chk (buff1, src, ' ', strlen(src), __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, src, ' ', strlen(src));
	if (!memcmp(buff1, buff2, strlen(buff2)))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


[crash]: your memccpy does not work with basic params
Test code:
	char buff1[0xF00];
	char buff2[0xF00];

	__builtin___memccpy_chk (buff1, &src, '\x42', sizeof(src), __builtin_object_size (buff1, 0));
	ft_memccpy(buff2, &src, '\x42', sizeof(src));
	if (!memcmp(buff1, buff2, strlen(buff2)))
		exit(TEST_SUCCESS);
	exit(TEST_FAILED);


ft_memmove:    [MISSING]
ft_memchr:     [MISSING]
ft_memcmp:     [MISSING]
ft_strlen:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] 
ft_isalpha:    [OK] 
ft_isdigit:    [OK] 
ft_isalnum:    [OK] 
ft_isascii:    [OK] 
ft_isprint:    [OK] 
ft_toupper:    [OK] 
ft_tolower:    [OK] 
ft_strchr:     [MISSING]
ft_strrchr:    [MISSING]
ft_strncmp:    [MISSING]
ft_strlcpy:    [MISSING]
ft_strlcat:    [MISSING]
ft_strnstr:    [MISSING]
ft_atoi:       [MISSING]
ft_calloc:     [MISSING]
ft_strdup:     [MISSING]
ft_substr:     [MISSING]
ft_strjoin:    [MISSING]
ft_strtrim:    [MISSING]
ft_split:      [MISSING]
ft_itoa:       [MISSING]
ft_strmapi:    [MISSING]
ft_putchar_fd: [MISSING]
ft_putstr_fd:  [MISSING]
ft_putendl_fd: [MISSING]
ft_putnbr_fd:  [MISSING]
ft_lstnew:     [MISSING]
ft_lstadd_front: [MISSING]
ft_lstsize:    [MISSING]
ft_lstlast:    [MISSING]
ft_lstadd_back:[MISSING]
ft_lstdelone:  [MISSING]
ft_lstclear:   [MISSING]
ft_lstiter:    [MISSING]
ft_lstmap:     [MISSING]
